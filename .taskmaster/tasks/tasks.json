{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "F-1: 初始化项目 (Monorepo Setup)",
        "description": "使用 pnpm workspaces 或 yarn workspaces 设置一个包含 `backend` 和 `frontend` 包的 Monorepo。 outcome: 一个统一的代码仓库，便于管理前后端代码和共享配置。",
        "details": "1. 选择并安装合适的包管理工具 (pnpm 或 yarn) 并初始化项目仓库。\n2. 在项目根目录下创建 `backend` 和 `frontend` 两个子包目录。\n3. 在每个子包目录下初始化新的 package.json 文件。\n4. 在项目根目录的 package.json 文件中配置 workspaces，将 `backend` 和 `frontend` 包纳入管理。\n5. 安装项目级别的依赖包。\n6. 确保能够在项目根目录下运行 `pnpm install` 或 `yarn install` 安装所有依赖。\n7. 在项目根目录下创建一个 `.gitignore` 文件，忽略各子包的 `node_modules` 目录。\n8. 提交代码到 Git 仓库。",
        "testStrategy": "1. 验证项目根目录下的 package.json 文件中是否正确配置了 workspaces。\n2. 尝试在项目根目录下运行 `pnpm install` 或 `yarn install`，确保所有依赖都能正确安装。\n3. 检查 `backend` 和 `frontend` 子包目录下是否都有各自的 `node_modules` 目录。\n4. 尝试在项目根目录下运行各子包的 `start` 或 `build` 脚本，确保能够正常执行。\n5. 验证 `.gitignore` 文件是否正确忽略了 `node_modules` 目录。\n6. 确保代码已经提交到 Git 仓库。",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "F-2: 设置API合约 (Initialize OpenAPI Contract)",
        "description": "在项目根目录创建 `openapi.yml` 文件。此文件将作为所有API定义的唯一事实来源 (Single Source of Truth)。",
        "details": "1. 在项目根目录下创建一个名为 `openapi.yml` 的新文件。\n2. 在此文件中定义所有后端API的规范，包括路径、参数、请求/响应模型等。\n3. 确保 `openapi.yml` 文件的内容符合 OpenAPI 3.0 规范。\n4. 将此文件作为项目中所有API定义的唯一来源。\n5. 要求后端开发人员严格遵循此 API 合约进行开发。\n6. 要求前端开发人员严格按照此 API 合约进行API调用和数据处理。\n7. 将 `openapi.yml` 文件纳入版本控制管理，确保所有团队成员都能访问和修改。",
        "testStrategy": "1. 验证 `openapi.yml` 文件是否已经在项目根目录下创建。\n2. 检查 `openapi.yml` 文件的内容是否符合 OpenAPI 3.0 规范。\n3. 确保后端开发人员正在使用 `openapi.yml` 文件作为API定义的唯一来源。\n4. 确保前端开发人员正在严格按照 `openapi.yml` 文件中的定义进行API调用和数据处理。\n5. 在集成测试阶段，验证端到端的API行为是否与 `openapi.yml` 文件中的定义一致。\n6. 确保 `openapi.yml` 文件已经纳入版本控制管理。",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "F-3: Build Core Backend Service",
        "description": "Use FastAPI to build a web server, configure basic routes and a standardized JSON response middleware. Ensure the built-in OpenAPI documentation (/docs) can be automatically generated from the openapi.yml file.",
        "details": "1. Set up a new FastAPI application in the `backend` package.\n2. Define the basic routes and endpoints for the application, including:\n   - Health check endpoint (e.g. `/healthz`)\n   - API root endpoint (e.g. `/api/v1`)\n3. Implement a standardized JSON response middleware to ensure all API responses follow a consistent format.\n4. Configure the application to automatically generate OpenAPI documentation based on the `openapi.yml` file.\n5. Ensure the generated OpenAPI documentation is accessible at the `/docs` endpoint.\n6. Write comprehensive unit and integration tests to verify the correct behavior of the backend service.\n7. Deploy the backend service to a hosting environment for integration testing and user acceptance.",
        "testStrategy": "1. Verify the FastAPI application is running and accessible at the expected endpoints.\n2. Test the health check endpoint (`/healthz`) to ensure it returns a successful response.\n3. Test the API root endpoint (`/api/v1`) to ensure it returns a standardized JSON response.\n4. Validate the OpenAPI documentation is accessible at the `/docs` endpoint and that it accurately reflects the API definitions in `openapi.yml`.\n5. Write unit tests for the core functionality of the backend service, including the routing, middleware, and OpenAPI integration.\n6. Write integration tests that exercise the full end-to-end behavior of the backend service, including API calls, data processing, and response validation.\n7. Deploy the backend service to a hosting environment and perform user acceptance testing to ensure the service meets the expected requirements.",
        "status": "done",
        "dependencies": [
          1,
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "F-4: Install Core Dependencies",
        "description": "Install and configure the core frontend and backend tools and libraries required for development, including UI component library, state management, testing frameworks, and HTTP client.",
        "details": "Frontend:\n1. Install and configure a UI component library, such as Ant Design, to provide a consistent and responsive UI.\n2. Install and configure a state management library, such as Zustand, to manage the application state.\n3. Install and configure a testing framework, such as Vitest for unit tests and Playwright or Cypress for end-to-end (E2E) tests.\n\nBackend:\n1. Install and configure a testing framework, such as Pytest, to enable unit and integration testing.\n2. Install and configure an HTTP client library, such as httpx, to facilitate making API requests from the backend.\n\nOutcome: The core tools and libraries required for frontend and backend development are set up and ready to use.",
        "testStrategy": "Frontend:\n1. Verify that the UI component library is properly installed and configured by rendering a sample component.\n2. Verify that the state management library is properly installed and configured by creating a simple state store and updating the state.\n3. Verify that the unit testing framework is properly installed and configured by writing and running a sample unit test.\n4. Verify that the E2E testing framework is properly installed and configured by writing and running a sample E2E test.\n\nBackend:\n1. Verify that the testing framework is properly installed and configured by writing and running a sample unit test.\n2. Verify that the HTTP client library is properly installed and configured by making a sample API request and validating the response.",
        "status": "done",
        "dependencies": [
          1,
          3
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "F-5: 容器化 (Containerization)",
        "description": "为后端和前端服务分别创建 `Dockerfile`，并创建一个 `docker-compose.yml` 文件来编排本地开发、测试和生产环境。确保绝对一致的运行环境，消除\"在我电脑上可以运行\"的问题。",
        "details": "1. 在 `backend` 和 `frontend` 子包目录下分别创建 `Dockerfile` 文件。\n2. 在 `Dockerfile` 中定义构建和运行应用程序的步骤，包括:\n   - 选择合适的基础镜像\n   - 安装必要的依赖包\n   - 复制应用程序代码\n   - 暴露应用程序端口\n   - 定义启动命令\n3. 在项目根目录下创建一个 `docker-compose.yml` 文件。\n4. 在 `docker-compose.yml` 文件中定义前后端服务的编排配置,包括:\n   - 服务名称和镜像\n   - 环境变量\n   - 端口映射\n   - 网络配置\n   - 依赖关系\n5. 确保 `docker-compose.yml` 文件能够在本地开发、测试和生产环境中正确编排应用程序。\n6. 编写文档说明如何使用 Docker 和 Docker Compose 来构建、运行和管理应用程序。",
        "testStrategy": "1. 验证 `backend` 和 `frontend` 子包目录下的 `Dockerfile` 文件是否正确构建应用程序镜像。\n2. 在本地运行 `docker-compose up` 命令,确保前后端服务能够正常启动并相互通信。\n3. 在不同的环境中(如开发、测试、生产)运行 `docker-compose up` 命令,验证应用程序行为是否一致。\n4. 测试应用程序的端到端功能,确保在容器化环境中的行为与本地开发环境一致。\n5. 检查 `docker-compose.yml` 文件的配置是否正确,包括服务依赖关系、环境变量和端口映射。\n6. 验证文档是否清晰地解释了如何使用 Docker 和 Docker Compose 来构建、运行和管理应用程序。",
        "status": "done",
        "dependencies": [
          4,
          3
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "F-6: 建立CI/CD流水线 (CI/CD Pipeline 'Hello World' Deployment)",
        "description": "使用 GitHub Actions 或类似工具建立CI/CD流水线。该流水线应能自动运行所有测试（目前为空）、构建Docker镜像、推送到容器仓库，并成功部署一个\"Hello World\"应用到生产或预发环境。",
        "details": "1. 在项目根目录下创建一个 `.github/workflows` 目录。\n2. 在该目录下创建一个新的 GitHub Actions 工作流文件,如 `ci-cd.yml`.\n3. 在工作流文件中定义以下步骤:\n   - 检出代码仓库\n   - 安装必要的依赖工具,如 Docker、Docker Compose\n   - 运行所有测试用例\n   - 构建 Docker 镜像\n   - 将镜像推送到容器仓库(如 Docker Hub 或 GitHub Container Registry)\n   - 部署 \"Hello World\" 应用到生产或预发环境\n4. 确保工作流文件能够在每次代码提交时自动触发执行。\n5. 监控工作流执行状态,确保所有步骤都能顺利完成。\n6. 在部署完成后,验证 \"Hello World\" 应用是否能够正常访问。\n7. 编写文档说明如何查看工作流执行日志和部署状态。",
        "testStrategy": "1. 验证 `.github/workflows/ci-cd.yml` 文件是否正确定义了所有必要的步骤。\n2. 触发一次代码提交,确保 GitHub Actions 工作流能够自动执行。\n3. 检查工作流执行日志,确保所有步骤都能顺利完成,包括:\n   - 运行所有测试用例\n   - 构建 Docker 镜像\n   - 推送镜像到容器仓库\n   - 部署 \"Hello World\" 应用\n4. 访问部署的 \"Hello World\" 应用,确认能够正常访问。\n5. 检查文档是否清晰地解释了如何查看工作流执行状态和部署情况。",
        "status": "done",
        "dependencies": [
          5
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "F-7: 配置管理 (Secrets & Configuration Management)",
        "description": "集成 `python-dotenv` 或更强大的配置管理工具（如 HashiCorp Vault），统一管理API密钥、数据库凭据等敏感信息。确保CI/CD和本地开发环境都能安全、一致地加载配置。",
        "details": "1. 评估并选择合适的配置管理工具,如 `python-dotenv` 或 HashiCorp Vault。\n2. 在项目中集成选定的配置管理工具:\n   - 在代码中加载和使用配置参数\n   - 确保敏感信息（如API密钥、数据库凭据）不会被意外泄露\n   - 在CI/CD流水线中安全地加载配置\n3. 编写文档说明如何在本地开发和生产环境中正确配置和使用配置管理工具。\n4. 确保所有开发人员都遵循统一的配置管理流程,避免手动管理配置信息。\n5. 定期审查和更新配置参数,确保安全性和一致性。",
        "testStrategy": "1. 验证在本地开发环境中能够正确加载和使用配置参数。\n2. 验证在CI/CD流水线中能够安全地加载和使用配置参数。\n3. 测试在不同环境（如开发、测试、生产）中配置是否一致。\n4. 模拟配置参数更新的场景,验证更新后的配置能否正确应用。\n5. 检查文档是否清晰地解释了配置管理的流程和最佳实践。",
        "status": "done",
        "dependencies": [
          6
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "P-1: 智能输入解析与意图分析 (Intent Parsing & Analysis Feature)",
        "description": "Contract-driven epic to enable intelligent input parsing and intent analysis across backend and frontend.",
        "details": "Implements preprocessing, LLM-based intent detection, external product fetching, API endpoint, frontend state/UI, and complete test coverage.",
        "testStrategy": "All child subtasks' unit, integration, and E2E tests must pass in CI.",
        "status": "in-progress",
        "dependencies": [
          2,
          3,
          4
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": "8.1",
            "title": "更新 openapi.yml 定义 /api/v1/intent/parse 端点",
            "details": "Add POST /api/v1/intent/parse with request body schema { userInput: string } and structured success/error responses as per PRD.",
            "testStrategy": "Run openapi-cli validate to pass without errors.",
            "status": "done"
          },
          {
            "id": "8.2",
            "title": "实现 preprocess_input 纯函数并编写单元测试",
            "details": "Create app/services/preprocessor.py with URL extraction, text separation, decision logic skip_llm flag.",
            "testStrategy": "Pytest cases covering link-only, mixed, and text-only scenarios.",
            "status": "done",
            "dependencies": [
              "8.1"
            ]
          },
          {
            "id": "8.3",
            "title": "封装 llm_service.get_shopping_intent 并环境变量配置",
            "details": "Move provided AsyncOpenAI code into app/services/llm_service.py with robust error handling and dependency injection for easier testing.",
            "testStrategy": "Unit tests mocking OpenAI client to validate JSON parsing and fallback behaviour.",
            "status": "done",
            "dependencies": [
              "8.2"
            ]
          },
          {
            "id": "8.4",
            "title": "实现 daji_service 与 weidian_service Stub",
            "details": "Create service modules to fetch product details given IDs/URLs with httpx; include timeout and retry; provide fake data fallback for development.",
            "testStrategy": "Unit tests mocking HTTP responses.",
            "status": "done",
            "dependencies": [
              "8.2"
            ]
          },
          {
            "id": "8.5",
            "title": "实现 /api/v1/intent/parse FastAPI 路由",
            "details": "Integrate preprocessor, llm_service, external services; implement rate limiting (simple in-memory) and standardized JSON response.",
            "testStrategy": "Integration tests using httpx AsyncClient with mocked external calls for 200 and 429 paths.",
            "status": "done",
            "dependencies": [
              "8.3",
              "8.4"
            ]
          },
          {
            "id": "8.6",
            "title": "编写后端集成测试",
            "details": "Cover scenarios: URL with product, text intent true/false, rate limit exceed.",
            "testStrategy": "Pytest with pytest-mock; >90% coverage.",
            "status": "done",
            "dependencies": [
              "8.5"
            ]
          },
          {
            "id": "8.7",
            "title": "创建 frontend/useIntentStore (Zustand)",
            "details": "Async action parseIntent calling backend and managing isLoading, data, error states.",
            "testStrategy": "Vitest unit tests mocking fetch API.",
            "status": "done",
            "dependencies": [
              "8.5"
            ]
          },
          {
            "id": "8.8",
            "title": "实现 IntentInputForm UI 组件",
            "details": "AntD TextArea + Button, show loading spinner, product card or message.",
            "testStrategy": "Storybook stories and visual regression tests.",
            "status": "done",
            "dependencies": [
              "8.7"
            ]
          },
          {
            "id": "8.9",
            "title": "前端单元测试覆盖 store 与组件",
            "details": "Vitest react-testing-library to assert render and state transitions.",
            "testStrategy": ">90% statements coverage for store/component files.",
            "status": "pending",
            "dependencies": [
              "8.8"
            ]
          },
          {
            "id": "8.10",
            "title": "端到端测试：Intent 解析流程",
            "details": "Playwright script: input Taobao link -> expect product card; input non-shopping text -> expect no shopping message.",
            "testStrategy": "Playwright CI run must pass on GitHub Actions.",
            "status": "pending",
            "dependencies": [
              "8.9"
            ]
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-19T07:28:43.359Z",
      "updated": "2025-06-19T07:33:46.065Z",
      "description": "Tasks for master context"
    }
  }
}